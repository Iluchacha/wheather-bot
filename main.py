import telebot
import config
import yandex_weather_api
import requests as req
import sqlite3
import schedule
import time
from telebot import types


bot = telebot.TeleBot(config.BOT_TOKEN)
status_search = 0
city_now = ''
city = ''
user = ''
us_id = 0
eng_dir = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'c']
rus_dir = ['—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π', '—Å–µ–≤–µ—Ä–Ω—ã–π', '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', '–≤–æ—Å—Ç–æ—á–Ω—ã–π', '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', '—é–∂–Ω—ã–π', '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π',
           '–∑–∞–ø–∞–¥–Ω—ã–π', '—à—Ç–∏–ª—å']
prec = ['–±–µ–∑ –æ—Å–∞–¥–∫–æ–≤', '–¥–æ–∂–¥—å', '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º', '—Å–Ω–µ–≥', '–≥—Ä–∞–¥']


def insert_into_db(info):
    try:
        print(info)
        sqlite_connection = sqlite3.connect('user_times.db')
        cursor = sqlite_connection.cursor()
        sqlite_insert_query = """INSERT INTO times
                                         (id, name, address, send_time)
                                         VALUES (?, ?, ?, ?);"""
        cursor.execute(sqlite_insert_query, info)
        sqlite_connection.commit()
        sqlite_connection.commit()
        cursor.close()
    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
    finally:
        if sqlite_connection:
            sqlite_connection.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")


def delete_from_db(info):
    try:
        sqlite_connection = sqlite3.connect('user_times.db')
        cursor = sqlite_connection.cursor()
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")

        sql_update_query = """DELETE from times where id = ?"""
        cursor.execute(sql_update_query, (info, ))
        sqlite_connection.commit()
        print("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        cursor.close()

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
    finally:
        if sqlite_connection:
            sqlite_connection.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")


def update_db(info):
    ch_address, ch_time, ch_id = info
    try:
        sqlite_connection = sqlite3.connect('user_times.db')
        cursor = sqlite_connection.cursor()

        sql_update_query = """Update times set address = ? where id = ?"""
        data = (ch_address, ch_id)
        cursor.execute(sql_update_query, data)

        sql_update_query = """Update times set send_time = ? where id = ?"""
        data = (ch_time, ch_id)
        cursor.execute(sql_update_query, data)

        sqlite_connection.commit()
        cursor.close()

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
    finally:
        if sqlite_connection:
            sqlite_connection.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")


def is_valid_time(us_time):
    if ':' in us_time:
        a = us_time.split(':')
        if a[0].isdigit():
            if len(a[0]) == 2 and a[0][0] == '0':
                a[0] = a[0][1]
            if len(a[1]) == 2 and a[1][0] == '0':
                a[1] = a[1][1]
            if 0 <= int(a[0]) < 24 and 0 <= int(a[1]) < 60:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def address_to_position(toponim):  # –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–µ—Ä–µ–≤–æ–¥ –∞–¥—Ä–µ—Å—Å–∞ –≤ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    place = toponim
    b = req.get("https://geocode-maps.yandex.ru/1.x/?apikey=" + config.GEOCODE_TOKEN + "&geocode=" + place +
                "&format=json").json()
    x, y = b["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["Point"]["pos"].split()
    return [y, x]


def get_weather(cords, day):  # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –º–µ—Å—Ç–∞
    a = yandex_weather_api.get(req, config.WEATHER_TOKEN, rate='forecast', lat=cords[0], lon=cords[1])
    if day != -1:
        info = a["forecasts"][day]
        date = '.'.join(info["date"].split('-')[::-1])

        night_temp = info["parts"]["night"]["temp_avg"]
        night_windd = rus_dir[eng_dir.index(info["parts"]["night"]["wind_dir"])]
        night_winds = info["parts"]["night"]["wind_speed"]
        night_prec = prec[int(info["parts"]["night"]["prec_type"])]
        night = "üåô –ù–æ—á—å:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: " + str(int(round(night_temp, 0))) + ' ‚ÑÉ\n–í–µ—Ç–µ—Ä: ' + night_windd + ' '\
                + str(
            night_winds) + ' –º/—Å\n–û—Å–∞–¥–∫–∏: ' + night_prec + '\n'

        morning_temp = info["parts"]["morning"]["temp_avg"]
        morning_windd = rus_dir[eng_dir.index(info["parts"]["morning"]["wind_dir"])]
        morning_winds = info["parts"]["morning"]["wind_speed"]
        morning_prec = prec[int(info["parts"]["morning"]["prec_type"])]
        morning = "üåÖ –£—Ç—Ä–æ:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: " + str(int(round(morning_temp, 0))) + ' ‚ÑÉ\n–í–µ—Ç–µ—Ä: ' + morning_windd\
                  + ' ' + str(
            morning_winds) + ' –º/—Å\n–û—Å–∞–¥–∫–∏: ' + morning_prec + '\n'

        day_temp = info["parts"]["day"]["temp_avg"]
        day_windd = rus_dir[eng_dir.index(info["parts"]["day"]["wind_dir"])]
        day_winds = info["parts"]["day"]["wind_speed"]
        day_prec = prec[int(info["parts"]["day"]["prec_type"])]
        day = "‚òÄ –î–µ–Ω—å:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: " + str(int(round(day_temp, 0))) + ' ‚ÑÉ\n–í–µ—Ç–µ—Ä: ' + day_windd + ' ' + str(
            day_winds) + ' –º/—Å\n–û—Å–∞–¥–∫–∏: ' + day_prec + '\n'

        evening_temp = info["parts"]["evening"]["temp_avg"]
        evening_windd = rus_dir[eng_dir.index(info["parts"]["evening"]["wind_dir"])]
        evening_winds = info["parts"]["evening"]["wind_speed"]
        evening_prec = prec[int(info["parts"]["evening"]["prec_type"])]
        evening = "üåá –í–µ—á–µ—Ä:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: " + str(int(round(evening_temp, 0))) + ' ‚ÑÉ\n–í–µ—Ç–µ—Ä: ' + evening_windd\
                  + ' ' + str(
            evening_winds) + ' –º/—Å\n–û—Å–∞–¥–∫–∏: ' + evening_prec

        answer = "–ü–æ–≥–æ–¥–∞ –Ω–∞ " + date + ":\n" + night + morning + day + evening
    else:
        info = a["fact"]
        real_temp = info["temp"]
        feel_temp = info["feels_like"]
        wind_speed = info["wind_speed"]
        wind_dir = rus_dir[eng_dir.index(info["wind_dir"])]
        humidity = info["humidity"]
        prec_type = prec[int(info["prec_type"])]
        answer = "–°–µ–π—á–∞—Å –≤ " + city_now + ":\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: " + str(int(round(real_temp, 0))) +\
                 ' ‚ÑÉ\nüå° –û—â—É—â–∞–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ' + str(int(round(feel_temp, 0))) + ' ‚ÑÉ\nüí® –í–µ—Ç–µ—Ä: ' + wind_dir + ' '\
                 + str(wind_speed) + ' –º/—Å\nüåß –û—Å–∞–¥–∫–∏: ' + prec_type + '\nüí¶ –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: ' + str(humidity) + '%'
    return answer


def menu():  # –≤–æ–∑—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É")
    button2 = types.KeyboardButton("–£–∑–Ω–∞–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –µ–∂–µ–¥–Ωe–≤–Ω–æ")
    button3 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    markup.add(button1, button2, button3)
    return markup



@bot.message_handler(commands=['start'])
def welcome(message):  # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_stic = open('welcome.tgs', 'rb')
    bot.send_sticker(message.chat.id, welcome_stic)
    markup = menu()
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <b>{0.first_name}</b>!\n<b>{1.first_name}</b> - —ç—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π"
                                      " –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ —Ä–∞–∑–Ω—ã—Ö —É–≥–æ–ª–∫–∞—Ö –º–∏—Ä–∞!".format(message.from_user,
                                                                                               bot.get_me()),
                     parse_mode='html', reply_markup=markup)

    curs = sqlite3.connect('user_times.db').cursor()
    if curs.execute('SELECT * FROM times WHERE id=?', (message.from_user.id, )).fetchone():
        try:
            sqlite_connection = sqlite3.connect('user_times.db')
            cursor = sqlite_connection.cursor()
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")

            sql_select_query = """select * from times where id = ?"""
            cursor.execute(sql_select_query, (message.from_user.id,))
            data = cursor.fetchall()
            schedule.every().day.at(data[0][3]).do(bot.send_message(message.chat.id,
                                                                    get_weather(address_to_position(data[0][2]), 0)))
            cursor.close()

        except sqlite3.Error as error:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
        finally:
            if sqlite_connection:
                sqlite_connection.close()
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")



@bot.message_handler(content_types=['text'])
def messages(message):  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    global status_search, city_now, city, user, us_id
    curs = sqlite3.connect('user_times.db').cursor()
    if message.chat.type == 'private':
        us_id = message.from_user.id
        if message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' and status_search == 0:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–ú–µ–Ω—é")
            markup.add(button1)
            bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö —Ö–∞–∫–∞—Ç–æ–Ω–∞ <b>Geek Battle</b> –æ—Ç —à–∫–æ–ª—ã"
                                              " –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è <b>AllStack</b>.\n–ü—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª"
                                              " <a href=\"https://vk.com/iluchacha\">–©–µ—Ä–±–∞–∫–æ–≤ –ò–ª—å—è</a>(@iluchacha).",
                             parse_mode='html', reply_markup=markup)

        elif message.text == '–£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É' and status_search == 0:
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:')
            status_search = 1  # –°—Ç–∞—Ç—É—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –ø–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ª–æ–∫–∞—Ü–∏–∏

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' and status_search == 0:
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:')
            status_search = 5

        elif message.text == '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏' and status_search == 0:
            delete_from_db(us_id)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–ú–µ–Ω—é")
            markup.add(button1)
            bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!', reply_markup=markup)


        elif message.text == '–£–∑–Ω–∞–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –µ–∂–µ–¥–Ωe–≤–Ω–æ' and status_search == 0 and not curs.execute('SELECT * FROM '
                                                                                                     'times WHERE id=?',
                                                                                                     (us_id, ))\
                .fetchone():
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:')
            status_search = 2

        elif message.text == '–£–∑–Ω–∞–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –µ–∂–µ–¥–Ωe–≤–Ω–æ' and status_search == 0 and curs.execute('SELECT * FROM times '
                                                                                                 'WHERE id=?',
                                                                                                 (us_id, )).fetchone():
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            button2 = types.KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
            button3 = types.KeyboardButton("–ú–µ–Ω—é")
            markup.add(button1, button2, button3)
            bot.send_message(message.chat.id, '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ –ø–æ–≥–æ–¥–µ!', reply_markup=markup)

        elif message.text == '–ú–µ–Ω—é' and status_search == 0:
            markup = menu()
            bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', reply_markup=markup)

        elif status_search == 1:
            city_now = message.text
            markup = types.InlineKeyboardMarkup(row_width=2)
            button0 = types.InlineKeyboardButton("–°–µ–π—á–∞—Å", callback_data='-1')
            button = types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data='0')
            button1 = types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data='1')
            button2 = types.InlineKeyboardButton("–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", callback_data='2')
            markup.add(button0, button, button1, button2)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:', reply_markup=markup)
            status_search = 0

        elif status_search == 2:
            city = message.text
            user = message.from_user.username
            us_id = message.from_user.id
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ '
                                              '(–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):')
            status_search = 3

        elif status_search == 5:
            city = message.text
            user = message.from_user.username
            us_id = message.from_user.id
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ '
                                              '(–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):')
            status_search = 4

        elif status_search == 3:
            us_time = message.text
            if is_valid_time(us_time):
                status_search = 0
                insert_into_db((us_id, user, city, us_time))
                bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ –ø–æ–≥–æ–¥–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ '
                                                  '—Ä–µ–≥–∏–æ–Ω–µ!')

            else:
                status_search = 3
                bot.send_message(message.chat.id,
                                 '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):')

        elif status_search == 4:
            us_time = message.text
            if is_valid_time(us_time):
                status_search = 0
                update_db([city, us_time, us_id])
                bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ '
                                                  '—Ä–µ–≥–∏–æ–Ω–µ!')

            else:
                status_search = 4
                bot.send_message(message.chat.id,
                                 '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):')
        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')



@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == '-1':
                bot.send_message(call.message.chat.id, get_weather(address_to_position(city_now), -1))
            elif call.data == '0':
                bot.send_message(call.message.chat.id, get_weather(address_to_position(city_now), 0))
            elif call.data == '1':
                bot.send_message(call.message.chat.id, get_weather(address_to_position(city_now), 1))
            elif call.data == '2':
                bot.send_message(call.message.chat.id, get_weather(address_to_position(city_now), 2))

            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:", reply_markup=None)

    except Exception as e:
        print(repr(e))


# RUN
bot.polling(none_stop=True)
while True:
    schedule.run_pending()
    time.sleep(1)